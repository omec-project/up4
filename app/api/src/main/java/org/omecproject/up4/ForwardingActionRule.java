/*
 SPDX-License-Identifier: LicenseRef-ONF-Member-Only-1.0
 SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
 */
package org.omecproject.up4;

import org.onlab.packet.Ip4Address;
import org.onlab.util.ImmutableByteSequence;

import java.util.Objects;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;

/**
 * A single Forwarding Action Rule (FAR), an entity described in the 3GPP specifications (although that does not mean
 * that this class is 3GPP compliant). An instance of this class will be generated by a logical switch write request
 * to the database-style FAR P4 table, and the resulting instance should contain all the information needed to
 * reproduce that logical switch FAR in the event of a client read request. The instance should also contain sufficient
 * information (or expose the means to retrieve such information) to generate the corresponding
 * fabric.p4 dataplane forwarding state that implements the FAR.
 */
public final class ForwardingActionRule {
    // Match Keys
    private final ImmutableByteSequence sessionId;  // The PFCP session identifier that created this FAR
    private final int farId;  // PFCP session-local identifier for this FAR
    // Action parameters
    private final Boolean drop;  // Should this FAR drop packets?
    private final Boolean notifyCp;  // Should this FAR notify the control plane when it sees a packet?
    private final boolean buffer;   // Should this FAR buffer incoming packets?
    private final GtpTunnel tunnel;  // The GTP tunnel that this FAR should encapsulate packets with (if downlink)
    private final Type type;  // Is the FAR Uplink, Downlink, etc

    private static final int SESSION_ID_BITWIDTH = 96;

    private ForwardingActionRule(ImmutableByteSequence sessionId, Integer farId,
                                 Boolean drop, Boolean notifyCp, boolean buffer, GtpTunnel tunnel, Type type) {
        this.sessionId = sessionId;
        this.farId = farId;
        this.drop = drop;
        this.buffer = buffer;
        this.notifyCp = notifyCp;
        this.tunnel = tunnel;
        this.type = type;
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public String toString() {
        String matchKeys = String.format("ID:%d,SEID:%s", farId, sessionId.toString());
        String directionString;
        String actionParams;
        if (bufferFlag()) {
            directionString = "Buffering";
            actionParams = "";
        } else if (isUplink()) {
            directionString = "Uplink";
            actionParams = String.format("Drop:%b,Notify:%b", drop, notifyCp);
        } else if (isDownlink()) {
            directionString = "Downlink";
            actionParams = String.format("Drop:%b,Notify:%b,Tunnel:%s", drop, notifyCp, tunnel.toString());
        } else {
            directionString = "Blank";
            actionParams = "";
        }

        return String.format("%s-FAR{ Keys:(%s) -> Params (%s) }", directionString, matchKeys, actionParams);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        ForwardingActionRule that = (ForwardingActionRule) obj;

        // Safe comparisons between potentially null objects
        return (this.type.equals(that.type) &&
                (this.farId == that.farId) &&
                Objects.equals(this.tunnel, that.tunnel) &&
                Objects.equals(this.drop, that.drop) &&
                Objects.equals(this.notifyCp, that.notifyCp) &&
                Objects.equals(this.sessionId, that.sessionId));
    }

    @Override
    public int hashCode() {
        return Objects.hash(sessionId, farId, drop, notifyCp, tunnel, type);
    }

    /**
     * Instances created as a result of DELETE write requests will not have action parameters, only match keys.
     * This method should be used to avoid null pointer exceptions in those instances.
     *
     * @return true if this instance has FAR action parameters, false otherwise.
     */
    public boolean hasActionParameters() {
        return type != Type.KEYS_ONLY;
    }

    /**
     * True if this FAR forwards packets in the uplink direction, and false otherwise.
     *
     * @return true if FAR is uplink
     */
    public boolean isUplink() {
        return type == Type.UPLINK;
    }

    /**
     * True if this FAR forwards packets in the downlink direction, and false otherwise.
     *
     * @return true is FAR is downlink
     */
    public boolean isDownlink() {
        return type == Type.DOWNLINK;
    }

    /**
     * Get the ID of the PFCP Session that produced this FAR.
     *
     * @return PFCP session ID
     */
    public ImmutableByteSequence sessionId() {
        return sessionId;
    }

    /**
     * Get the PFCP session-local ID of the FAR that should apply to packets that match this PDR.
     *
     * @return PFCP session-local FAR ID
     */
    public int farId() {
        return farId;
    }

    /**
     * Returns true if this FAR drops packets, and false otherwise.
     *
     * @return true if this FAR drops
     */
    public boolean dropFlag() {
        return drop;
    }

    /**
     * Returns true if this FAR notifies the control plane on receiving a packet, and false otherwise.
     *
     * @return true if this FAR notifies the cp
     */
    public boolean notifyCpFlag() {
        return notifyCp;
    }


    /**
     * Returns true if this FAR buffers incoming packets, and false otherwise.
     *
     * @return true if this FAR buffers
     */
    public boolean bufferFlag() {
        return buffer;
    }

    /**
     * A description of the tunnel that this FAR will encapsulate packets with, if it is a downlink FAR. If the FAR
     * is uplink, there will be no such tunnel and this method wil return null.
     *
     * @return A GtpTunnel instance containing a tunnel sourceIP, destIP, and GTPU TEID, or null if the FAR is uplink.
     */
    public GtpTunnel tunnel() {
        return tunnel;
    }

    /**
     * Get the source UDP port of the GTP tunnel that this FAR will encapsulate packets with.
     *
     * @return GTP tunnel source UDP port
     */
    public Short tunnelSrcPort() {
        return tunnel != null ? tunnel.srcPort() : null;
    }

    /**
     * Get the source IP of the GTP tunnel that this FAR will encapsulate packets with.
     *
     * @return GTP tunnel source IP
     */
    public Ip4Address tunnelSrc() {
        if (tunnel == null) {
            return null;
        }
        return tunnel.src();
    }

    /**
     * Get the destination IP of the GTP tunnel that this FAR will encapsulate packets with.
     *
     * @return GTP tunnel destination IP
     */
    public Ip4Address tunnelDst() {
        if (tunnel == null) {
            return null;
        }
        return tunnel.dst();
    }

    /**
     * Get the identifier of the GTP tunnel that this FAR will encapsulate packets with.
     *
     * @return GTP tunnel ID
     */
    public ImmutableByteSequence teid() {
        if (tunnel == null) {
            return null;
        }
        return tunnel.teid();
    }

    public enum Type {
        /**
         * Uplink FARs apply to packets traveling in the uplink direction, and do not encapsulate.
         */
        UPLINK,
        /**
         * Downlink FARS apply to packets traveling in the downlink direction, and do encapsulate.
         */
        DOWNLINK,
        /**
         * FAR was not built with any action parameters, only match keys.
         */
        KEYS_ONLY
    }

    public static class Builder {
        private ImmutableByteSequence sessionId;
        private Integer farId;
        private Boolean drop;
        private Boolean notifyCp;
        private boolean buffer;
        private GtpTunnel tunnel;

        public Builder() {
            sessionId = null;
            farId = null;
            drop = null;
            notifyCp = null;
            tunnel = null;
            buffer = false;
        }

        /**
         * Set the ID of the PFCP session that created this FAR.
         *
         * @param sessionId PFC session ID
         * @return This builder object
         */
        public Builder withSessionId(ImmutableByteSequence sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        /**
         * Set the ID of the PFCP session that created this FAR.
         *
         * @param sessionId PFC session ID
         * @return This builder object
         */
        public Builder withSessionId(long sessionId) {
            try {
                this.sessionId = ImmutableByteSequence.copyFrom(sessionId).fit(SESSION_ID_BITWIDTH);
            } catch (ImmutableByteSequence.ByteSequenceTrimException e) {
                // This error is literally impossible
            }
            return this;
        }

        /**
         * Set the PFCP Session-local ID of this FAR.
         *
         * @param farId PFCP session-local FAR ID
         * @return This builder object
         */
        public Builder withFarId(int farId) {
            this.farId = farId;
            return this;
        }


        /**
         * Set flags specifying whether this FAR should drop packets and/or notify the control plane when
         * any packets arrive.
         *
         * @param drop     true if this FAR drops
         * @param notifyCp true if this FAR notifies the control plane
         * @return This builder object
         */
        public Builder withFlags(boolean drop, boolean notifyCp) {
            this.drop = drop;
            this.notifyCp = notifyCp;
            return this;
        }

        /**
         * Set a flag specifying if this FAR drops traffic or not.
         *
         * @param drop true if FAR drops
         * @return This builder object
         */
        public Builder withDropFlag(boolean drop) {
            this.drop = drop;
            return this;
        }

        /**
         * Set a flag specifying if the control plane should be notified when this FAR is hit.
         *
         * @param notifyCp true if FAR notifies control plane
         * @return This builder object
         */
        public Builder withNotifyFlag(boolean notifyCp) {
            this.notifyCp = notifyCp;
            return this;
        }

        /**
         * Set a flag specifying if this FAR should buffer incoming packets.
         *
         * @param buffer true if this FAR buffers packets
         * @return This builder object
         */
        public Builder withBufferFlag(boolean buffer) {
            this.buffer = buffer;
            return this;
        }

        /**
         * Set the GTP tunnel that this FAR should encapsulate packets with.
         *
         * @param tunnel GTP tunnel
         * @return This builder object
         */
        public Builder withTunnel(GtpTunnel tunnel) {
            this.tunnel = tunnel;
            return this;
        }

        /**
         * Set the unidirectional GTP tunnel that this FAR should encapsulate packets with.
         *
         * @param src  GTP tunnel source IP
         * @param dst  GTP tunnel destination IP
         * @param teid GTP tunnel ID
         * @return This builder object
         */
        public Builder withTunnel(Ip4Address src, Ip4Address dst, ImmutableByteSequence teid) {
            return this.withTunnel(GtpTunnel.builder()
                    .setSrc(src)
                    .setDst(dst)
                    .setTeid(teid)
                    .build());
        }

        /**
         * Set the unidirectional GTP tunnel that this FAR should encapsulate packets with.
         *
         * @param src  GTP tunnel source IP
         * @param dst  GTP tunnel destination IP
         * @param teid GTP tunnel ID
         * @param srcPort GTP tunnel UDP source port (destination port is hardcoded as 2152)
         * @return This builder object
         */
        public Builder withTunnel(Ip4Address src, Ip4Address dst, ImmutableByteSequence teid, short srcPort) {
            return this.withTunnel(GtpTunnel.builder()
                    .setSrc(src)
                    .setDst(dst)
                    .setTeid(teid)
                    .setSrcPort(srcPort)
                    .build());
        }

        public ForwardingActionRule build() {
            // All match keys are required
            checkNotNull(sessionId, "Session ID is required");
            checkNotNull(farId, "FAR ID is required");
            // Action parameters are optional. If the tunnel desc is provided, the flags must also be provided.
            checkArgument((drop != null && notifyCp != null) ||
                            (drop == null && notifyCp == null && tunnel == null),
                    "FAR Arguments must be provided together or not at all.");
            Type type;
            if (drop == null && notifyCp == null) {
                type = Type.KEYS_ONLY;
            } else if (tunnel == null) {
                type = Type.UPLINK;
            } else {
                type = Type.DOWNLINK;
            }
            return new ForwardingActionRule(sessionId, farId, drop, notifyCp, buffer, tunnel, type);
        }
    }
}
