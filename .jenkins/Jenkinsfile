// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

// To validate: ./jflint.sh Jenkinsfile

// TODO: send email to ghprbPullAuthorEmail if failure

pipeline {

  agent {
    label "${params.buildNode}"
  }

  environment {
    CODECOV_TOKEN = "26252f52-8c2d-4cfd-bd2f-ec00a71d2942"
  }

  stages {
    stage("Environment Cleanup") {
      steps {
        step([$class: "WsCleanup"])
      }
    }
    stage("Checkout") {
      steps {
        checkout([
            $class           : "GitSCM",
            userRemoteConfigs: [[url          : "ssh://git@github.com/omec-project/up4.git",
                                 refspec      : "+refs/pull/*:refs/remotes/origin/pr/*",
                                 credentialsId: "github-onf-bot-ssh-key",]],
            branches         : [[name: "${params.sha1}"]],
            extensions       : [
                [$class: "RelativeTargetDirectory", relativeTargetDir: "up4"],
                [$class: "SubmoduleOption", recursiveSubmodules: true, parentCredentials: true]]
        ],)
      }
    }
    stage("Docker login") {
      steps {
        withCredentials([[$class          : "UsernamePasswordMultiBinding",
                          credentialsId   : "registry.aetherproject.org",
                          usernameVariable: "USERNAME",
                          passwordVariable: "PASSWORD"]]) {
          sh "docker login registry.aetherproject.org -u $USERNAME -p $PASSWORD"
        }
      }
    }
    stage("Set JDK 11") {
      steps {
        sh "sudo update-java-alternatives -s java-11-amazon-corretto"
      }
    }
    stage("Dependencies") {
      options { retry(3) }
      steps {
        dir("${env.WORKSPACE}/up4") {
          sh "make deps"
          sh "cd app && make deps"
          sh "cd scenarios && make deps"
        }
      }
    }
    stage("Build P4 program") {
      steps {
        dir("${env.WORKSPACE}/up4") {
          sh "make build"
        }
      }
    }
    stage("Check P4Info") {
      steps {
        dir("${env.WORKSPACE}/up4") {
          script {
            def modifiedFiles = sh returnStdout: true, script: "git status --porcelain"
            if (modifiedFiles?.trim()) {
              error("The following P4 build artifacts do not correspond to the expected ones, " +
                  "please run the build locally and commit any changes to these files:\n" +
                  modifiedFiles)
            }
          }
        }
      }
    }
    stage("Run PTF tests") {
      steps {
        dir("${env.WORKSPACE}/up4") {
          sh "make check"
        }
      }
    }
    stage("Build ONOS app") {
      steps {
        dir("${env.WORKSPACE}/up4/app") {
          sh "make build-ci"
        }
      }
      post {
        success {
          dir("${env.WORKSPACE}/up4/app") {
            sh "bash <(curl -s https://codecov.io/bash)"
          }
        }
      }
    }
    stage("Smoke test") {
      options { retry(3) }
      steps {
        dir("${env.WORKSPACE}/up4/scenarios") {
          sh "make reset smoke.xml stcColor=false stcDumpLogs=true"
        }
      }
      post {
        always {
          dir("${env.WORKSPACE}/up4/scenarios") {
            // Onos shared folders contain jars and other stuff that is too big and unnecessary.
            // TODO: keep grpc logs, e.g.
            //  tmp/onos/grpc___mininet_50001_device_id_1_10895743235847776841.log
            sh 'find ./tmp -type d -name \'onos*\' -exec rm -rf {} +'
            sh "tar -czvf scenarios-tmp.tar.gz ./tmp"
            archiveArtifacts artifacts: "scenarios-tmp.tar.gz"
          }
        }
      }
    }
  }
}
