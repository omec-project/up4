// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

// To validate: ./jflint.sh Jenkinsfile

// sha1 used for PRs, while commitHash is populated for postmerge
def commitHash = params.commitHash ? params.commitHash : params.sha1
def up4Env = params.up4Env ? "${params.up4Env}" : "stable"

pipeline {

  agent {
    label "${params.buildNode}"
  }
  options {
    timeout(time: 30, unit: 'MINUTES')
  }

  environment {
    UP4_ENV = "${up4Env}"
    JAVA_HOME = "/usr/lib/jvm/java-11-amazon-corretto"
    GITHUB_URL = "ssh://git@github.com/omec-project/up4.git"
  }

  stages {
    stage("Environment Cleanup") {
      steps {
        step([$class: "WsCleanup"])
      }
    }
    stage("Checkout") {
      steps {
        checkout([
            $class           : "GitSCM",
            userRemoteConfigs: [[url          : "${env.GITHUB_URL}",
                                 refspec      : "+refs/heads/*:refs/remotes/origin/* +refs/pull/*:refs/remotes/origin/pr/*",
                                 credentialsId: "github-onf-bot-ssh-key",]],
            branches         : [[name: "${commitHash}"]],
            extensions       : [
                [$class: "RelativeTargetDirectory", relativeTargetDir: "up4"],
                [$class: "SubmoduleOption", recursiveSubmodules: true, parentCredentials: true]]
        ],)
      }
    }
    stage("Prep") {
      steps {
        // Docker login
        withCredentials([[$class          : "UsernamePasswordMultiBinding",
                          credentialsId   : "registry.aetherproject.org",
                          usernameVariable: "USERNAME",
                          passwordVariable: "PASSWORD"]]) {
          sh 'docker login registry.aetherproject.org -u $USERNAME -p $PASSWORD'
        }
        // Set JDK 11
        sh "sudo update-java-alternatives -s java-11-amazon-corretto"
      }
    }
    stage("Dependencies") {
      options { retry(3) }
      steps {
        dir("${env.WORKSPACE}/up4") {
          sh "make deps"
          sh "cd app && make deps"
          sh "cd scenarios && make deps"
        }
      }
    }
    stage("Build P4 and constants") {
      steps {
        dir("${env.WORKSPACE}/up4") {
          sh "make build constants"
        }
      }
    }
    stage("Check P4Info") {
      steps {
        dir("${env.WORKSPACE}/up4") {
          script {
            def modifiedFiles = sh returnStdout: true, script: "git status --porcelain"
            if (modifiedFiles?.trim()) {
              error("The following P4 build artifacts do not correspond to the expected ones, " +
                  "please run the build locally and commit any changes to these files:\n" +
                  modifiedFiles)
            }
          }
        }
      }
    }
    stage("Run PTF tests") {
      steps {
        dir("${env.WORKSPACE}/up4") {
          sh "make check"
        }
      }
    }
    stage("Build ONOS app") {
      steps {
        dir("${env.WORKSPACE}/up4/app") {
          sh "make build-ci"
        }
      }
      post {
        success {
          dir("${env.WORKSPACE}/up4/app") {
            sh "bash ../.jenkins/codecov.sh"
          }
        }
      }
    }
    stage("Smoke test leaf-spine") {
      options { retry(3) }
      steps {
        runSTCSmokeTest("leafspine")
      }
      post {
        always {
          exportArtifactsScenarios("leafspine")
        }
      }
    }
    stage("Smoke test single pair-leaf") {
      options { retry(3) }
      steps {
        runSTCSmokeTest("singlepair")
      }
      post {
        always {
          exportArtifactsScenarios("singlepair")
        }
      }
    }
  }
  post {
    success {
      script {
        if (!params.ghprbPullId?.trim()) {
          setBuildStatus("Build succeeded", "SUCCESS", "${env.GITHUB_URL}", "${env.JOB_NAME}")
        }
      }
    }
    failure {
      script {
        if (params.ghprbPullId?.trim()) {
          // Pull request, alert author
          emailext(
              subject: "[${env.JOB_NAME}] ${currentBuild.currentResult}: pull request #${params.ghprbPullId}",
              body: "Check results at ${env.BUILD_URL}\n\nTriggered by GitHub pull request at ${params.ghprbPullLink}",
              to: "${params.ghprbPullAuthorEmail}"
          )
        } else {
          setBuildStatus("Build failed", "FAILURE", "${env.GITHUB_URL}")
          // Post-merge, alert project maintainers
          emailext(
              subject: "[${env.JOB_NAME}] ${currentBuild.currentResult}: ${params.sha1}",
              body: "Check results at ${env.BUILD_URL}",
              to: "carmelo@opennetworking.org"
          )
        }
      }
    }
  }
}

void runSTCSmokeTest(String topo) {
  dir("${env.WORKSPACE}/up4/scenarios") {
    sh "make reset"
    sh "TOPO=${topo} make smoke.xml stcColor=false stcDumpLogs=true"
  }
}

void exportArtifactsScenarios(String topo) {
  dir("${env.WORKSPACE}/up4/scenarios") {
    // Print Docker image version labels, etc.
    sh "make versions > ./tmp/versions.txt"
    // Onos shared folders contain jars and other stuff that is too big and unnecessary,
    // keep just the grpc logs.
    sh "make fix-permissions"
    sh "find ./tmp/onos*/ -type f -not -name \"grpc_*.log\" -print -delete"
    sh "tar -czvf ${topo}-scenarios-tmp.tar.gz ./tmp"
    archiveArtifacts artifacts: "${topo}-scenarios-tmp.tar.gz"
  }
}

void setBuildStatus(String message, String state, String url, String context) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: url],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}
