#!/usr/bin/env python3
# SPDX-FileCopyrightText: 2020 Open Networking Foundation <info@opennetworking.org>
# SPDX-License-Identifier: LicenseRef-ONF-Member-1.0
import argparse

import p4runtime_sh.shell as sh
from google.protobuf import text_format
from p4.v1 import p4runtime_pb2

# TODO: use correct IP addreses for end-marker
PKTS = {
    'end-marker': """
        payload: "\000\000\000\000\000\000\000\000\000\000\000\000\010\000E\000\000$\000\001\000\000@\021\232\304\214\000d\002\214\000d\001\010h\010h\000\020\000\0000\376\000\000\000\000\000\001"
        metadata { metadata_id: 1 value: "\000" }
        """
}


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--server", type=str, default="onos1:51001",
                        help="Address and port of the p4runtime server")
    parser.add_argument("--election-id", type=int, default=15, help="Election ID")
    parser.add_argument("--type", type=str,
                        help="Type of packet-out to send (%s)" % ", ".join(PKTS.keys()))
    return parser.parse_args()


args = get_args()


def main():
    if args.type not in PKTS:
        print("ERROR: unknown packet type")
        exit(1)

    # Connect to gRPC server
    sh.setup(device_id=1, grpc_addr=args.server, election_id=(0, args.election_id))

    try:
        stream_req = p4runtime_pb2.StreamMessageRequest()
        text_format.Merge(PKTS[args.type], stream_req.packet)
        print(text_format.MessageToString(stream_req, as_one_line=True))
        sh.client.stream_out_q.put(stream_req)
    finally:
        sh.teardown()

    exit(0)


if __name__ == "__main__":
    main()
