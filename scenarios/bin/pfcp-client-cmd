#!/bin/bash
# SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
# SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

set -ex

imgName="pfcp-client"
logFile="tmp/pfcp-messenger-screen.log"
agentName="pfcp-agent"
dockerExec="docker-compose exec -T $imgName"

echo "Provided command is $1"
if [ "$1" = "start" ]; then
    echo "" > $logFile
    # Start messenger in detached screen session
    ${dockerExec} screen -d -L -Logfile /$logFile -S Messenger -m /up4/bin/pfcp-messenger.py $agentName
    # Flush logs in real-time
    # If you don't know screen and wondering what the heck colon means:
    # https://www.gnu.org/software/screen/manual/html_node/Colon.html
    ${dockerExec} screen -S Messenger -X colon "logfile flush 0^M"
    exit 0
elif [ "$1" = "kill" ]; then
    # Kill all windows and terminate screen, to emulate SMF crash.
    # shellcheck disable=SC2016
    ${dockerExec} screen -S Messenger -X quit
    exit 0
elif [ "$1" = "check" ]; then
    for _ in {1..30}; do
        set +e
        # Make sure the last line of the pfcp-messenger stdout contains just the prompt message,
        # without any unexecuted command, likely to happen if we forgot ^M.
        lastLine="$(tail -n 1 $logFile)"
        if [ "${lastLine}" = "Enter your selection : " ]; then
            # If the screen session still running?
            ${dockerExec} screen -ls | grep "Messenger" | grep "Detached" && exit 0
        fi
        set -e
        sleep 1
    done
    echo "${lastLine}"
    ${dockerExec} screen -ls
    exit 1
else
    # Send any other command to pfcp-messenger
    # shellcheck disable=SC2068
    ARGS="$@"
    ${dockerExec} screen -S Messenger -X -p 0 stuff "${ARGS}^M"
fi
